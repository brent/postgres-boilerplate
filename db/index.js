const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASS || '',
});

const createTriggerFunctionQuery = `
  CREATE FUNCTION trigger_update_timestamp()
  RETURNS TRIGGER AS $$
  BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;
`;

const setTriggerFunctionQuery = `
  CREATE TRIGGER set_timestamp
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE PROCEDURE trigger_update_timestamp();
`;

const createUsersTableQuery = `
  CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (id)
  );
`;

const createTokensTableQuery = `
  CREATE TABLE tokens (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INT UNIQUE NOT NULL,
    token TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
  );
`;

const createPostsTableQuery = `
  CREATE TABLE posts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL,
    content TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
  );
`;

const handleError = (err) => {
  switch (err.code) {
    case '42723':
      console.log('trigger_update_timestamp() already exists');
      break;
    case '42710':
      console.log('update trigger already set');
      break;
    case '42P07':
      // table exists
      console.log(err.message);
      break;
    default:
      console.log(err);
  }
}

pool.query(createTriggerFunctionQuery)
  .then(res => console.log('trigger_update_timestamp() created'))
  .catch(err => handleError(err));

pool.query(createUsersTableQuery)
  .then(res => {
    console.log('users table created');

    pool.query(setTriggerFunctionQuery)
      .then(res => console.log('update trigger set'))
      .catch(err => { throw err });

    pool.query(createTokensTableQuery)
      .then(res => console.log('tokens table created'))
      .catch(err => { throw err });

    pool.query(createPostsTableQuery)
      .then(res => console.log('posts table created'))
      .catch(err => { throw err });
  })
  .catch(err => handleError(err));

module.exports = {
  query: (text, params, callback) => {
    return pool.query(text, params, callback);
  },
};
